b1wb3J0IHJhbmRvbQpkZWYgR2V0X0luZGV4X0Nhbl9GaW5kKGZyYW5nZSxzZWxmX2luZGV4LGluZGV4X3N1bSk6CglhbnMgPSBbXQoJaWYgc2VsZl9pbmRleCArIGZyYW5nZSA8IGluZGV4X3N1bToKCQlmb3IgaSBpbiB4cmFuZ2Uoc2VsZl9pbmRleCArIDEsc2VsZl9pbmRleCArIGZyYW5nZSArIDEpOgoJCQlpZiBpICE9IHNlbGZfaW5kZXg6CgkJCQlhbndarkwZW5kKGkpCgllbHNlOgoJCWZvciBpIGluIHhyYW5nZShzZWxmX2luZGV4ICsgMSxpbmRleF9zdW0pOgoJCQkJYW5zLmFwcGVuZChpKQoJcmV0dXJuIGFucwpDaXZpbGl6YXRpb25fQXR0aXR1ZGUgPSBbXQpDaXZpbGl6YXRpb25fVGVjaG5vbG9neSA9IFtdCkNpdmlsaXphdGlvbl9FeHRpbmN0ID0gW10Kc2F2ZV9sb2cgPSBGYWxzZQpDb250aW5udWUgPSAieSIKcHJpbnQgIldlbGNvbWUgdG8gdGhlIERhcmsgRm9yZXN0Li4uIgppZiByYXdfaW5wdXQoIkRvIHlvdSB3YW50IHRvIHNhdmUgbG9nW3kvbl06IikgPT0gInkiOgoJc2F2ZV9sb2cgPSBUcnVlCglmID0gb3BlbigiZGV0YWlscy5sb2ciLCAidyIpCglsb2dfdGV4dCA9ICIiCkNpdmlsaXphdGlvbl9OdW1iZXIgPSBpbnB1dCgiUGxlYXNlIHNldCB0aGUgbnVtYmVyIG9mIGNpdmlsaXphdGlvbnM6XG4iKQpwcmludCAiU2V0IHN1Y2Nlc3NmdWxseS4iCmlmIHNhdmVfbG9nOgoJbG9nX3RleHQgKz0gIm51bWJlciBvZiBjaXZpbGl6YXRpb25zOiAiICsgc3RyKENpdmlsaXphdGlvbl9OdW1iZXIpICsgIlxuIgpBdHRpdHVkZV9TZXQgPSByYXdfaW5wdXQoIlBsZWFzZSBzZXQgYXR0aXR1ZGUgdG8gdGhlIGFsaWVuIG9mIGVhY2ggY2l2aWxpemF0aW9uLiBJZiB5b3Ugd2FudCB0byBiZSByYW5kb20sIGlucHV0OnJhbmRvbS4gT3RoZXIgYmVoYXZpb3JzIGFyZSBjb25zaWRlcmVkIG1hbnVhbCBpbnB1dDpcbiIpCmlmIEF0dGl0dWRlX1NldCAhPSAicmFuZG9tIiBhbmQgQ2l2aWxpemF0aW9uX051bWJlciA8PSAxMDoKCXByaW50ICJQbGVhc2Ugc2V0IGF0dGl0dWRlIHRvIHRoZSBhbGllbiBvZiBlYWNoIGNpdmlsaXphdGlvbi4gMCBzdGFuZHMgZm9yIG5ldXRyYWxpdHksIDEgc3RhbmRzIGZvciBmcmllbmRseSwgYW5kIC0xIHN0YW5kcyBmb3IgYWdncmVzc2l2ZWx5LiIKCWZvciBpIGluIHhyYW5nZSgxLENpdmlsaXphdGlvbl9OdW1iZXIrMSk6CgkJQ2l2aWxpemF0aW9uX0F0dGl0dWRlLmFwcGVuZChpbnB1dCgiU2V0IGNpdmlsaXphdGlvbiIgKyBzdHIoaSkgKyAiOiIpKQoJCWlmIHNhdmVfbG9nOgoJCQlpZiBDaXZpbGl6YXRpb25fQXR0aXR1ZGVbaS0xXSA9PSAtMToKCQkJCWxvZ190ZXh0ICs9ICJjaXZpbGl6YXRpb24iICsgc3RyKGkrMSkgKyAiOiBhZ2dyZXNzaXZlbHlcbiIKCQkJaWYgQ2l2aWxpemF0aW9uX0F0dGl0dWRlW2ktMV0gPT0gMDoKCQkJCWxvZ190ZXh0ICs9ICJjaXZpbGl6YXRpb24iICsgc3RyKGkrMSkgKyAiOiBuZXV0cmFsaXR5XG4iCgkJCWlmIENpdmlsaXphdGlvbl9BdHRpdHVkZVtpLTFdID09IDE6CgkJCQlsb2dfdGV4dCArPSAiY2l2aWxpemF0aW9uIiArIHN0cihpKzEpICsgIjogZnJpZW5kbHlcbiIKCQlDaXZpbGl6YXRpb25fVGVjaG5vbG9neS5hcHBlbmQoMTApCgkJQ2l2aWxpemF0aW9uX0V4dGluY3QuYXBwZW5kKEZhbHNlKQoJcHJpbnQgIlNldCBzdWNjZXNzZnVsbHkuIgplbHNlOgoJaWYgQ2l2aWxpemF0aW9uX051bWJlciA+IDEwOgoJCXByaW50ICJUaGUgbnVtYmVyIG9mIGNpdmlsaXphdGlvbnMgaXMgdG9vIGxhcmdlLiIKCXByaW50ICJCZWdpbiB0byByYW5kb20gdGhlIGF0dGl0dWRlcy4uLiIKCWZvciBpIGluIHhyYW5nZSgwLENpdmlsaXphdGlvbl9OdW1iZXIpOgoJCUNpdmlsaXphdGlvbl9BdHRpdHVkZS5hcHBlbmQocmFuZG9tLnJhbmRpbnQoLTEsMSkpCgkJaWYgc2F2ZV9sb2c6CgkJCWlmIENpdmlsaXphdGlvbl9BdHRpdHVkZVtpXSA9PSAtMToKCQkJCWxvZ190ZXh0ICs9ICJjaXZpbGl6YXRpb24iICsgc3RyKGkrMSkgKyAiOiBhZ2dyZXNzaXZlbHlcbiIKCQkJaWYgQ2l2aWxpemF0aW9uX0F0dGl0dWRlW2ldID09IDA6CgkJCQlsb2dfdGV4dCArPSAiY2l2aWxpemF0aW9uIiArIHN0cihpKzEpICsgIjogbmV1dHJhbGl0eVxuIgoJCQlpZiBDaXZpbGl6YXRpb25fQXR0aXR1ZGVbaV0gPT0gMToKCQkJCWxvZ190ZXh0ICs9ICJjaXZpbGl6YXRpb24iICsgc3RyKGkrMSkgKyAiOiBmcmllbmRseVxuIgoJCUNpdmlsaXphdGlvbl9UZWNobm9sb2d5LmFwcGVuZCgxMCkKCQlDaXZpbGl6YXRpb25fRXh0aW5jdC5hcHBlbmQoRmFsc2UpCglwcmludCAiU2V0IHN1Y2Nlc3NmdWxseS4iCnByaW50ICJTdGFydC4uLiIKd2hpbGUgQ29udGlubnVlID09ICJ5IjoKCVNraXBfWWVhcnMgPSBpbnB1dCgiU2V0IHllYXJzIHRvIHNraXA6XG4iKQoJaWYgc2F2ZV9sb2c6CgkJbG9nX3RleHQgKz0gIkFmdGVyICIgKyBzdHIoU2tpcF9ZZWFycykgKyAiIHllYXJzXG4iCglmb3IgaSBpbiB4cmFuZ2UoMCxTa2lwX1llYXJzKzEpOgoJCWZvciBqIGluIHhyYW5nZSgwLENpdmlsaXphdGlvbl9OdW1iZXIpOgoJCQlpZiBDaXZpbGl6YXRpb25fRXh0aW5jdFtqXSA9PSBGYWxzZToKCQkJCUNpdmlsaXphdGlvbl9UZWNobm9sb2d5W2pdICs9IHJhbmRvbS5yYW5kaW50KDUsMTUpCgkJCQlJQ0YgPSBHZXRfSW5kZXhfQ2FuX0ZpbmQoQ2l2aWxpemF0aW9uX1RlY2hub2xvZ3lbal0vMTAwLGksQ2l2aWxpemF0aW9uX051bWJlcikKCQkJCWlmIENpdmlsaXphdGlvbl9BdHRpdHVkZVtqXSA9PSAxOgoJCQkJCWZvciBtIGluIElDRjoKCQkJCQkJaWYgQ2l2aWxpemF0aW9uX0V4dGluY3RbbV0gIT0gVHJ1ZToKCQkJCQkJCWlmIENpdmlsaXphdGlvbl9BdHRpdHVkZVttXSA9PSAwIG9yIENpdmlsaXphdGlvbl9BdHRpdHVkZVttXSA9PSAxOgoJCQkJCQkJCUNpdmlsaXphdGlvbl9UZWNobm9sb2d5W21dICs9IENpdmlsaXphdGlvbl9UZWNobm9sb2d5W2pdLzEwMAoJCQkJCQkJCUNpdmlsaXphdGlvbl9UZWNobm9sb2d5W2pdICs9IENpdmlsaXphdGlvbl9UZWNobm9sb2d5W21dLzEwMAoJCQkJCQkJCWlmIHNhdmVfbG9nOgoJCQkJCQkJCQlsb2dfdGV4dCArPSAiY2l2aWxpemF0aW9uIiArIHN0cihqKzEpICsgIiBhbGx5IHdpdGggY2l2aWxpemF0aW9uIiArIHN0cihtKzEpICsgIlxuIgoJCQkJCQkJZWxzZToKCQkJCQkJCQlpZihDaXZpbGl6YXRpb25fVGVjaG5vbG9neVttXSA+IENpdmlsaXphdGlvbl9UZWNobm9sb2d5W2pdKToKCQkJCQkJCQkJQ2l2aWxpemF0aW9uX1RlY2hub2xvZ3lbbV0gKz0gQ2l2aWxpemF0aW9uX1RlY2hub2xvZ3lbal0vMjAKCQkJCQkJCQkJQ2l2aWxpemF0aW9uX0V4dGluY3Rbal0gPSBUcnVlCgkJCQkJCQkJCWlmIHNhdmVfbG9nOgoJCQkJCQkJCQkJbG9nX3RleHQgKz0gImNpdmlsaXphdGlvbiIgKyBzdHIoaisxKSArICIgaGFzIGJlZW4gZGVzdHJveWVkIGJ5IGNpdmlsaXphdGlvbiIgKyBzdHIobSsxKSArICJcbiIKCQkJCQkJCQkJYnJlYWsKCQkJCWVsaWYgQ2l2aWxpemF0aW9uX0F0dGl0dWRlW2pdID09IC0xOgoJCQkJCWZvciBtIGluIElDRjoKCQkJCQkJaWYgQ2l2aWxpemF0aW9uX0V4dGluY3QgIT0gVHJ1ZToKCQkJCQkJCWlmKENpdmlsaXphdGlvbl9UZWNobm9sb2d5W21dIDwgQ2l2aWxpemF0aW9uX1RlY2hub2xvZ3lbal0pOgoJCQkJCQkJCUNpdmlsaXphdGlvbl9UZWNobm9sb2d5W2pdICs9IENpdmlsaXphdGlvbl9UZWNobm9sb2d5W21dLzIwCgkJCQkJCQkJQ2l2aWxpemF0aW9uX0V4dGluY3RbbV0gPSBUcnVlCgkJCQkJCQkJaWYgc2F2ZV9sb2c6CgkJCQkJCQkJCWxvZ190ZXh0ICs9ICJjaXZpbGl6YXRpb24iICsgc3RyKG0rMSkgKyAiIGhhcyBiZWVuIGRlc3Ryb3llZCBieSBjaXZpbGl6YXRpb24iICsgc3RyKGorMSkgKyAiXG4iCgkJCQkJCQllbHNlOgoJCQkJCQkJCWlmIENpdmlsaXphdGlvbl9BdHRpdHVkZVttXSAhPSAxOgoJCQkJCQkJCQlDaXZpbGl6YXRpb25fVGVjaG5vbG9neVttXSArPSBDaXZpbGl6YXRpb25fVGVjaG5vbG9neVtqXS8yMAoJCQkJCQkJCQlDaXZpbGl6YXRpb25fRXh0aW5jdFtqXSA9IFRydWUKCQkJCQkJCQkJaWYgc2F2ZV9sb2c6CgkJCQkJCQkJCQlsb2dfdGV4dCArPSAiY2l2aWxpemF0aW9uIiArIHN0cihqKzEpICsgIiBoYXMgYmVlbiBkZXN0cm95ZWQgYnkgY2l2aWxpemF0aW9uIiArIHN0cihtKzEpICsgIlxuIgoJCQkJCQkJCQlicmVhawoJUmVzdF9OZXV0cmFsaXR5ID0gMAoJUmVzdF9GcmllbmRseSA9IDAKCVJlc3RfQWdncmVzc2l2ZWx5ID0gMAoJUmVzdF9OZXV0cmFsaXR5X1RlY2hub2xvZ3kgPSAwCglSZXN0X0ZyaWVuZGx5X1RlY2hub2xvZ3kgPSAwCglSZXN0X0FnZ3Jlc3NpdmVseV9UZWNobm9sb2d5ID0gMAoJRXh0aW5jdF9OdW1iZXIgPSAwCglmb3IgaSBpbiB4cmFuZ2UoMCxDaXZpbGl6YXRpb25fTnVtYmVyKToKCQlpZiBDaXZpbGl6YXRpb25fRXh0aW5jdFtpXSA9PSBUcnVlOgoJCQlFeHRpbmN0X051bWJlciArPSAxCgkJZWxpZiBDaXZpbGl6YXRpb25fQXR0aXR1ZGVbaV0gPT0gLTE6CgkJCVJlc3RfQWdncmVzc2l2ZWx5ICs9IDEKCQkJUmVzdF9BZ2dyZXNzaXZlbHlfVGVjaG5vbG9neSArPSBDaXZpbGl6YXRpb25fVGVjaG5vbG9neVtpXQoJCWVsaWYgQ2l2aWxpemF0aW9uX0F0dGl0dWRlW2ldID09IDA6CgkJCVJlc3RfTmV1dHJhbGl0eSArPSAxCgkJCVJlc3RfTmV1dHJhbGl0eV9UZWNobm9sb2d5ICs9IENpdmlsaXphdGlvbl9UZWNobm9sb2d5W2ldCgkJZWxpZiBDaXZpbGl6YXRpb25fQXR0aXR1ZGVbaV0gPT0gMToKCQkJUmVzdF9GcmllbmRseSArPSAxCgkJCVJlc3RfRnJpZW5kbHlfVGVjaG5vbG9neSArPSBDaXZpbGl6YXRpb25fVGVjaG5vbG9neVtpXQoJcHJpbnQgIlRoZXJlIGFyZSAiICsgc3RyKFJlc3RfRnJpZW5kbHkpICsgIiBmcmllbmRseSBjaXZpbGl6YXRpb25zIGxlZnQuIFRoZXkgaGF2ZSAiICsgc3RyKFJlc3RfRnJpZW5kbHlfVGVjaG5vbG9neSkgKyAiIFRlY2hub2xvZ3kgcG9pbnRzIGluIGFsbC4iCglwcmludCAiVGhlcmUgYXJlICIgKyBzdHIoUmVzdF9OZXV0cmFsaXR5KSArICIgbmV1dHJhbGl0eSBjaXZpbGl6YXRpb25zIGxlZnQuIFRoZXkgaGF2ZSAiICsgc3RyKFJlc3RfTmV1dHJhbGl0eV9UZWNobm9sb2d5KSArICIgVGVjaG5vbG9neSBwb2ludHMgaW4gYWxsLiIKCXByaW50ICJUaGVyZSBhcmUgIiArIHN0cihSZXN0X0FnZ3Jlc3NpdmVseSkgKyAiIGFnZ3Jlc3NpdmVseSBjaXZpbGl6YXRpb25zIGxlZnQuIFRoZXkgaGF2ZSAiICsgc3RyKFJlc3RfQWdncmVzc2l2ZWx5X1RlY2hub2xvZ3kpICsgIiBUZWNobm9sb2d5IHBvaW50cyBpbiBhbGwuIgoJcHJpbnQgc3RyKEV4dGluY3RfTnVtYmVyKSArICIgY2l2aWxpemF0aW9ucyBoYXZlIGJlZW4gZXh0aW5jdGVkLiIKCWlmIHNhdmVfbG9nOgoJCWxvZ190ZXh0ICs9ICJUaGVyZSBhcmUgIiArIHN0cihSZXN0X0ZyaWVuZGx5KSArICIgZnJpZW5kbHkgY2l2aWxpemF0aW9ucyBsZWZ0LiBUaGV5IGhhdmUgIiArIHN0cihSZXN0X0ZyaWVuZGx5X1RlY2hub2xvZ3kpICsgIiBUZWNobm9sb2d5IHBvaW50cyBpbiBhbGwuXG5UaGVyZSBhcmUgIiArIHN0cihSZXN0X05ldXRyYWxpdHkpICsgIiBuZXV0cmFsaXR5IGNpdmlsaXphdGlvbnMgbGVmdC4gVGhleSBoYXZlICIgKyBzdHIoUmVzdF9OZXV0cmFsaXR5X1RlY2hub2xvZ3kpICsgIiBUZWNobm9sb2d5IHBvaW50cyBpbiBhbGwuXG5UaGVyZSBhcmUgIiArIHN0cihSZXN0X0FnZ3Jlc3NpdmVseSkgKyAiIGFnZ3Jlc3NpdmVseSBjaXZpbGl6YXRpb25zIGxlZnQuIFRoZXkgaGF2ZSAiICsgc3RyKFJlc3RfQWdncmVzc2l2ZWx5X1RlY2hub2xvZ3kpICsgIiBUZWNobm9sb2d5IHBvaW50cyBpbiBhbGwuXG4iICsgc3RyKEV4dGluY3RfTnVtYmVyKSArICIgY2l2aWxpemF0aW9ucyBoYXZlIGJlZW4gZXh0aW5jdGVkLlxuIgoJQ29udGlubnVlID0gcmF3X2lucHV0KCJBcmUgeW91IHN1cmUgdG8gQ29udGlubnVlP1t5L25dOiIpCmYud3JpdGUobG9nX3RleHQpCmYuY2xvc2UoKQ==